{"version":3,"sources":["logo.svg","features/static/Header.js","features/static/HomePage.js","features/static/TextInput.js","features/sectionA/InputForm.js","features/sectionA/SectionA.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","Header","activeStyle","color","base","process","PUBLIC_SUFFIX","to","exact","HomePage","className","src","logo","alt","TextInput","name","label","onChange","placeholder","value","error","wrapperClass","length","htmlFor","type","data-testid","InputForm","sectionA","errors","autocomplete","number","len","SectionA","useState","setSectionA","getAnswer","setAnswer","useEffect","answer","JSON","stringify","numArray","i","push","sectionALogic","parseInt","target","prevSectionA","style","wordWrap","App","path","component","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12170e20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8dad8028.svg\";","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Header = () => {\n  const activeStyle = { color: \"#F15B2A\" };\n  const base = process.env.PUBLIC_SUFFIX || \"\";\n\n  return (\n    <nav>\n      <NavLink to={`${base}/`} activeStyle={activeStyle} exact>\n        Home\n      </NavLink>\n      {\" | \"}\n      <NavLink to={`${base}/a`} activeStyle={activeStyle} exact>\n        Section A\n      </NavLink>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport logo from \"../../logo.svg\";\n\nconst HomePage = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Home Page</h1>\n      </header>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextInput = ({ name, label, onChange, placeholder, value, error }) => {\n  let wrapperClass = \"form-group\";\n  if (error && error.length > 0) {\n    wrapperClass += \" \" + \"has-error\";\n  }\n\n  return (\n    <div className={wrapperClass}>\n      <label htmlFor={name}>{label}</label>\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          name={name}\n          data-testid={name}\n          className=\"form-control\"\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n        />\n        {error && <div className=\"alert alert-danger\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string,\n  error: PropTypes.string,\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"../static/TextInput\";\n\nconst InputForm = ({ sectionA, onChange, errors = {} }) => {\n  return (\n    <>\n      <form autocomplete=\"off\">\n        <h2>Form</h2>\n        <TextInput\n          name=\"number\"\n          label=\"Number\"\n          value={sectionA.number}\n          onChange={onChange}\n          error={errors.number}\n        />\n        <TextInput\n          name=\"len\"\n          label=\"Length\"\n          value={sectionA.len}\n          onChange={onChange}\n          error={errors.len}\n        />\n      </form>\n    </>\n  );\n};\n\nInputForm.propTypes = {\n  sectionA: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  saving: PropTypes.bool,\n};\n\nexport default InputForm;\n","import React, { useState, useEffect } from \"react\";\nimport InputForm from \"./InputForm\";\n\nexport function sectionALogic(number, len) {\n  // const answer = (parseInt(number) + parseInt(len)).toString();\n  let numArray = [];\n  for (let i = 1; i <= len; i++) {\n    numArray.push(number * i);\n  }\n  return numArray;\n}\n\nconst SectionA = () => {\n  const [sectionA, setSectionA] = useState({\n    number: \"1\",\n    len: \"1\",\n  });\n  const [getAnswer, setAnswer] = useState(\"None\");\n  const errors = {};\n\n  useEffect(() => {\n    const answer = JSON.stringify(\n      sectionALogic(parseInt(sectionA.number), parseInt(sectionA.len))\n    );\n    setAnswer(answer);\n  }, [sectionA]);\n\n  function handleChange({ target: { name, value } }) {\n    setSectionA((prevSectionA) => {\n      return { ...prevSectionA, [name]: value };\n    });\n  }\n\n  return (\n    <>\n      <h1>Section A</h1>\n      <div>I'm Section A! Array of multiples.</div>\n      <InputForm sectionA={sectionA} onChange={handleChange} errors={errors} />\n      <div style={{ wordWrap: \"break-word\" }}>\n        Answer: <div data-testid=\"answer\">{getAnswer}</div>\n      </div>\n    </>\n  );\n};\n\nexport default SectionA;\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Header from \"./features/static/Header\";\r\nimport HomePage from \"./features/static/HomePage\";\r\nimport SectionA from \"./features/sectionA/SectionA\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route exact path=\"/a\" component={SectionA} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router basename={process.env.REACT_APP_PUBLIC_SUFIX}>\r\n        <div>REACT_APP_PUBLIC_SUFIX: {process.env.REACT_APP_PUBLIC_SUFIX}</div>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}